__author__ = 'Hai Bui'
import os
import pickle
import bll.common as c
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from collections import Counter
from bll.preprocessor import text_preprocess


test_percent = 0.2
text = []
label = []

# load label
if not os.path.exists(c.MODEL_PATH):
    os.makedirs(c.MODEL_PATH)
for line in open('../data/news_categories_v2.prep', encoding='utf8'):
    words = line.strip().split()
    label.append(words[0])
    text.append(' '.join(words[1:]))

X_train, X_test, y_train, y_test = train_test_split(text, label, test_size=test_percent, random_state=42)

# encode label
label_encoder = LabelEncoder()
label_encoder.fit(y_train)
y_train = label_encoder.transform(y_train)
y_test = label_encoder.transform(y_test)

nb_model = pickle.load(open(os.path.join(c.MODEL_PATH, 'naive_bayes_v2.pkl'), 'rb'))
# linear_model = pickle.load(open(os.path.join(c.MODEL_PATH, 'linear_classifier.pkl'), 'rb'))


def predict(input_data):
    clean_text = text_preprocess(input_data)
    text_label = nb_model.predict([clean_text])
    return label_encoder.inverse_transform(text_label)
# def predict(input_data):
#     clean_text = text_preprocess(input_data)
#     text_label = linear_model.predict([clean_text])
#     return label_encoder.inverse_transform(text_label)


def convert_label_to_text(label):
    if Counter(label) == Counter(['__label__c√¥ng_ngh·ªá']):
        return 'C√îNG NGH·ªÜ'
    elif Counter(label) == Counter(['__label__th·ªÉ_thao']):
        return 'TH·ªÇ THAO'
    elif Counter(label) == Counter(['__label__√¢m_nh·∫°c']):
        return '√ÇM NH·∫†C'
    elif Counter(label) == Counter(['__label__th·ªùi_s·ª±']):
        return 'TH·ªúI S·ª∞'
    elif Counter(label) == Counter(['__label__th·ªùi_trang']):
        return 'TH·ªúI TRANG'
    elif Counter(label) == Counter(['__label__du_l·ªãch']):
        return 'DU L·ªäCH'
    elif Counter(label) == Counter(['__label__gi√°o_d·ª•c']):
        return 'GI√ÅO D·ª§C'
    elif Counter(label) == Counter(['__label__kinh_doanh']):
        return 'KINH DOANH'
    elif Counter(label) == Counter(['__label__an_ninh_tr·∫≠t_t·ª±']):
        return 'AN NINH TR·∫¨T T·ª∞'
    elif Counter(label) == Counter(['__label__phim_·∫£nh']):
        return 'PHIM ·∫¢NH'
    elif Counter(label) == Counter(['__label__xe_360']):
        return 'XE'
    elif Counter(label) == Counter(['__label__·∫©m_th·ª±c']):
        return '·∫®M TH·ª∞C'
    elif Counter(label) == Counter(['__label__xu·∫•t_b·∫£n']):
        return 'XU·∫§T B·∫¢N'
    elif Counter(label) == Counter(['__label__s·ª©c_kh·ªèe']):
        return 'S·ª®C KH·ªéE'
    elif Counter(label) == Counter(['__label__th·∫ø_gi·ªõi']):
        return 'TH·∫æ GI·ªöI'
    elif Counter(label) == Counter(['__label__ch√≠nh_tr·ªã']):
        return 'CH√çNH TR·ªä'


def convert_label_to_labelID(label):
    if Counter(label) == Counter(['__label__c√¥ng_ngh·ªá']):
        return 'CN'
    elif Counter(label) == Counter(['__label__th·ªÉ_thao']):
        return 'TTH'
    elif Counter(label) == Counter(['__label__√¢m_nh·∫°c']):
        return 'AN'
    elif Counter(label) == Counter(['__label__th·ªùi_s·ª±']):
        return 'TS'
    elif Counter(label) == Counter(['__label__th·ªùi_trang']):
        return 'TTR'
    elif Counter(label) == Counter(['__label__du_l·ªãch']):
        return 'DL'
    elif Counter(label) == Counter(['__label__gi√°o_d·ª•c']):
        return 'GD'
    elif Counter(label) == Counter(['__label__kinh_doanh']):
        return 'KD'
    elif Counter(label) == Counter(['__label__an_ninh_tr·∫≠t_t·ª±']):
        return 'ANTT'
    elif Counter(label) == Counter(['__label__phim_·∫£nh']):
        return 'PA'
    elif Counter(label) == Counter(['__label__xe_360']):
        return 'XE'
    elif Counter(label) == Counter(['__label__·∫©m_th·ª±c']):
        return 'AT'
    elif Counter(label) == Counter(['__label__xu·∫•t_b·∫£n']):
        return 'XB'
    elif Counter(label) == Counter(['__label__s·ª©c_kh·ªèe']):
        return 'SK'
    elif Counter(label) == Counter(['__label__th·∫ø_gi·ªõi']):
        return 'TG'
    elif Counter(label) == Counter(['__label__ch√≠nh_tr·ªã']):
        return 'CT'

# input_data2 = '''THEO B·∫†N B√äN N√ÄO L√Ä N·ª§ C∆Ø·ªúI ƒêANG GI·∫¢ T·∫†O? üòÉ
# ----------------------------------------
# L√†m th·∫ø n√†o ƒë·ªÉ ch√∫ng ta bi·∫øt ƒë∆∞·ª£c n·ª• c∆∞·ªùi ƒë√≥ c√≥ ch√¢n th·∫≠t hay kh√¥ng, khi m√† c√≥ r·∫•t nhi·ªÅu n·ª• c∆∞·ªùi gi·∫£ t·∫°o c·ªßa ng∆∞·ªùi ƒë·ªëi di·ªán khi·∫øn ta hi·ªÉu sai t√¨nh hu·ªëng? B√†i vi·∫øt d∆∞·ªõi ƒë√¢y s·∫Ω gi√∫p b·∫°n gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y:
# N·ª• c∆∞·ªùi l√† ng√¥n ng·ªØ chung tr√™n th·∫ø gi·ªõi ƒë·∫°i di·ªán cho s·ª± th√¢n thi·ªán. Nh∆∞ng l√†m th·∫ø n√†o ƒë·ªÉ ch√∫ng ta bi·∫øt ƒë∆∞·ª£c n·ª• c∆∞·ªùi ƒë√≥ c√≥ ch√¢n th·∫≠t hay kh√¥ng?
# Nh√† t√¢m l√≠ h·ªçc Richard Wiseman ƒë√£ ti·∫øn h√†nh m·ªôt cu·ªôc nghi√™n c·ª©u ƒë·ªÉ ch·ª©ng minh kh·∫£ nƒÉng nh·∫≠n bi·∫øt ƒë·ªô ‚Äúth·∫≠t‚Äù c·ªßa n·ª• c∆∞·ªùi c·ªßa con ng∆∞·ªùi.
# Nhi·∫øp ·∫£nh gia s·∫Ω y√™u c·∫ßu ng∆∞·ªùi ƒë∆∞·ª£c ch·ª•p t∆∞·ªüng t∆∞·ª£ng ƒëang g·∫∑p m·ªôt ng∆∞·ªùi m√† h·ªç kh√¥ng ∆∞a v√† sau ƒë√≥ n·ªü n·ª• c∆∞·ªùi gi·∫£i t·∫°o; ti·∫øp theo h·ªç s·∫Ω t∆∞·ªüng t∆∞·ª£ng h·ªç ƒëang g·∫∑p m·ªôt ng∆∞·ªùi b·∫°n th√¢n v√† n·ªü m·ªôt n·ª• c∆∞·ªùi ch√¢n th√†nh. T·∫•t nhi√™n, c·∫£ hai t√¨nh hu·ªëng tr√™n s·∫Ω ƒë∆∞·ª£c nhi·∫øp ·∫£nh gia ch·ª•p l·∫°i.
# C√¢u h·ªèi ƒë·∫∑t ra l√† nh·∫≠n bi·∫øt n·ª• c∆∞·ªùi ‚Äúgi·∫£‚Äù v√† ‚Äúth·∫≠t‚Äù c√≥ kh√≥ kh√¥ng? ‚ÄúN·∫øu b·∫°n kh√¥ng c√≥ s·ª± ƒë·ªìng c·∫£m, b·∫°n s·∫Ω kh√≥ m√† ph√¢n bi·ªát ƒë∆∞·ª£c s·ª± kh√°c bi·ªát gi·ªØa hai b·ª©c ·∫£nh‚Äú, Wiseman cho bi·∫øt.
# Qua kh·∫£o s√°t √¥ng cho bi·∫øt kho·∫£ng 60% ng∆∞·ªùi b√¨nh th∆∞·ªùng s·∫Ω ph√¢n bi·ªát ƒë∆∞·ª£c s·ª± kh√°c nhau tr√™n, trong khi nh·ªØng ng∆∞·ªùi hay ƒëi ti·ªác t√πng s·∫Ω chi·∫øm t·ªâ l·ªá cao h∆°n: 66%.
# Ngo√†i ra c√°c ph√≥ng vi√™n v√† nh√† khoa h·ªçc x√£ h·ªôi l√† nh·ªØng ng∆∞·ªùi c√≥ t·ªâ l·ªá ƒëo√°n ƒë√∫ng cao nh·∫•t: 73% v√† 80% l·∫ßn l∆∞·ª£t. Hay n√≥i c√°ch kh√°c, nh·ªØng ng∆∞·ªùi l√†m c√¥ng vi·ªác c√≥ li√™n quan ƒë·∫øn con ng∆∞·ªùi hay ti·∫øp x√∫c nhi·ªÅu v·ªõi con ng∆∞·ªùi s·∫Ω nh·∫≠n ƒë·ªãnh ƒë∆∞·ª£c s·ª± kh√°c nhau gi·ªØa n·ª• c∆∞·ªùi ‚Äúgi·∫£‚Äù v√† ‚Äúth·∫≠t‚Äù d·ªÖ d√†ng h∆°n.
# ____________'''
#
#
# def predict2(input_data):
#     clean_text = text_preprocess(input_data)
#     text_label = nb_model.predict([clean_text])
#     return text_label
# print(predict2(input_data2))

# Naive Bayes
# model = pickle.load(open(os.path.join(MODEL_PATH,"naive_bayes.pkl"), 'rb'))
# y_pred = model.predict(X_test)
# print('Naive Bayes, Accuracy =', np.mean(y_pred == y_test))
#
# Print result all label
# y_pred = nb_model.predict(X_test)
# print(classification_report(y_test, y_pred, target_names=list(label_encoder.classes_)))
